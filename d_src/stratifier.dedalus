% This code takes ast facts and performes required stratification for negation and aggregation.
% It is assumed that input ast is valid (no negation or aggregation in dependency cycles).
%
% This code has explicitly specified stratification $stratum and $stratum_dependency,
% which makes it possible to execute it by semi-positive Datalog.

'$meta stratum'(a, ast_clause)@0;
'$meta stratum'(a, ast_body_expr)@0;
'$meta stratum'(a, ast_body_atom)@0;
'$meta stratum'(a, ast_atom)@0;
'$meta stratum'(a, ast_clause_var_arg)@0;
'$meta stratum'(a, ast_body_var_arg)@0;

'$meta stratum'(a, stratum)@0;
'$meta stratum'(a, stratum_dependency)@0;
'$meta stratum'(a, already_used_symbol)@0;
'$meta stratum'(a, already_assigned)@0;
'$meta stratum'(a, symbol)@0;
'$meta stratum'(a, initial_fact)@0;
'$meta stratum'(a, negated_dependency)@0;
'$meta stratum'(a, aggregated_dependency)@0;
'$meta stratum'(a, body_atom_uses_var)@0;
'$meta stratum'(a, aggregated_clause_var)@0;

'$meta stratum'(b, dependency)@0;
'$meta stratum'(b, next_available_symbol)@0;

'$meta stratum'(c, path)@0;
'$meta stratum'(c, cycle)@0;
'$meta stratum'(c, same_cycle)@0;
'$meta stratum'(c, leaf)@0;
'$meta stratum'(c, vertex)@0;

'$meta stratum'(d, has_bad_dependency)@0;
'$meta stratum'(d, has_bad_dependencies)@0;
'$meta stratum'(d, has_bad_external_dependencies_in_cycle)@0;

'$meta stratum'(e, selected)@0;

% $meta stratum_dependency forms a DAG, no cycles allowed.
% Each stratum contains set of rules, which are vertices in rule dependency graph.
% Basically we specify DAG of subgraphs.
%
% We could specify exact rule ordering for computation,
% use numbers for stratum identification instead of symbols,
% but thay would introduce more order than necessary.
%
% Better to keep things unordered as long as it is possible,
% to keep opportunities for optimization open.

'$meta stratum_dependency'(b, a)@0;
'$meta stratum_dependency'(c, b)@0;
'$meta stratum_dependency'(d, c)@0;
'$meta stratum_dependency'(e, d)@0;



% presist ast facts, we need them till very end
ast_clause(Name, ClauseId, Suffix)@next :-
  ast_clause(Name, ClauseId, Suffix);
ast_body_expr(ClauseId, ExprId)@next :-
  ast_body_expr(ClauseId, ExprId);
ast_body_atom(ExprId, Name, Negated)@next :-
  ast_body_atom(ExprId, Name, Negated);
ast_atom(Name, AtomId, Timestamp)@next :-
  ast_atom(Name, AtomId, Timestamp);
ast_clause_var_arg(ClauseId, ArgN, VarName, AggFunc, LocPrefix)@next :-
  ast_clause_var_arg(ClauseId, ArgN, VarName, AggFunc, LocPrefix);
ast_body_var_arg(ExprId, ArgN, VarName, LocPrefix)@next :-
  ast_body_var_arg(ExprId, ArgN, VarName, LocPrefix);

% Algorithm:
% 1) find all leaf dependencies
% 2) take first stratum number, assign it to leaf vertices
% 3) if all children are positive and have stratum A, then vertex also has stratum A
% 4) if vertex has negative child, where all children belong to A1, A2, ...,
%    then vertex has stratum max(A1, A2, ...)+1
% 5) if vertex belongs to cycle, when some of its children have stratum A1, A2, then its stratum is max(A1, A2, ...)+1



initial_fact(Name) :- ast_atom(Name, _AtomId, _Timestamp);

negated_dependency(Name1, Name2) :-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name2, Negated),
  Negated = true;

aggregated_dependency(Name1, Name2) :-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  % ast_body_expr(ClauseId, ExprId),
  % ast_body_atom(ExprId, Name2, Negated),
  aggregated_clause_var(ClauseId, VarName),
  body_atom_uses_var(ClauseId, Name2, VarName);

aggregated_clause_var(ClauseId, VarName) :-
  ast_clause_var_arg(ClauseId, _ArgN, VarName, AggFunc, _LocPrefix),
  AggFunc =/= none;

body_atom_uses_var(ClauseId, Name, VarName) :-
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name, Negated),
  ast_body_var_arg(ExprId, _ArgN, VarName, _LocPrefix);

dependency(Name1, Name2, NeedStratumChange) :-
  negated_dependency(Name1, Name2),
  NeedStratumChange = true;
dependency(Name1, Name2, NeedStratumChange) :-
  aggregated_dependency(Name1, Name2),
  NeedStratumChange = true;
dependency(Name1, Name2, NeedStratumChange) :-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name2, _Negated),

  notin negated_dependency(Name1, Name2),
  notin aggregated_dependency(Name1, Name2),
  NeedStratumChange = false;



path(Name1, Name2) :-
  dependency(Name1, Name2, _NeedStratumChange);
path(Name1, Name2) :-
  dependency(Name1, Name0, _NeedStratumChange),
  path(Name0, Name2);

cycle(Name) :- path(Name, Name);

same_cycle(Name1, Name2) :-
  path(Name1, Name2),
  path(Name2, Name1);

vertex(A) :- dependency(A, _B, _NeedStratumChange);
vertex(B) :- dependency(_A, B, _NeedStratumChange);

leaf(A) :-
  vertex(A),
  vertex(B),
  notin dependency(A, B, true),
  notin dependency(A, B, false);



% how to pick stratum:
% 1) select leaf rules
% 2) select rules that depend on selected rules and rules that already have a stratum
% 3) select rules that belongs to cycle and depends on rules that are selected, already have stratum or belongs to cycle

% keep already constructed strata
stratum(Stratum, Name)@next :- stratum(Stratum, Name);
stratum(Stratum, Name)@next :-
  selected(Name),
  next_available_symbol(Stratum);



stratum_dependency(ParentStratum, ChildStratum)@next :- stratum_dependency(ParentStratum, ChildStratum);
stratum_dependency(ParentStratum, ChildStratum)@next :-
  stratum(ParentStratum, Parent),
  stratum(ChildStratum, Child),
  ParentStratum =/= ChildStratum,
  dependency(Parent, Child, _NeedStratumChange);



already_assigned(Name) :-
  stratum(_Stratum, Name);

selected(Name) :-
  % if no bad dependency, and at least one already marked
  % then propagate further
  vertex(Name),
  notin already_assigned(Name),
  notin cycle(Name),
  notin has_bad_dependencies(Name);
selected(Name) :-
  cycle(Name),
  notin already_assigned(Name),
  notin has_bad_external_dependencies_in_cycle(Name);


has_bad_dependencies(Name) :-
  has_bad_dependency(Name, _Child);

has_bad_dependency(Name, Child) :-
  notin cycle(Name),
  dependency(Name, Child, NeedStratumChange),
  NeedStratumChange = true,
  notin already_assigned(Child);
has_bad_dependency(Name, Child) :-
  notin cycle(Name),
  dependency(Name, Child, NeedStratumChange),
  NeedStratumChange = false,
  has_bad_dependencies(Child);

% TODO: fix cycled dependencies stratification
% right now it clearly doesn't work properly
has_bad_dependency(Name, Child) :-
  % if rule is in cycle, then we count only
  % dependencies that do not belong to cycle
  cycle(Name),
  dependency(Name, Child, _NeedStratumChange),
  notin same_cycle(Name, Child),
  has_bad_dependency(Name, Child);

% If we have a rule in same cycle
% and it has bad dependency that doesn't belong to this cycle
% then it is really bad, should not be selected.
% Otherwise if we have dependency, but it is inside cycle,
% then shall proceed.
has_bad_external_dependencies_in_cycle(Name1) :-
  same_cycle(Name1, Name2),
  has_bad_dependencies(Name2);



next_available_symbol(NextSymbol) :-
  % we need to pick single symbol for new stratum
  % since we haven't implemented choose expression yet,
  % we can't use it. The only way to pick exactly one
  % new value is to use successor-like structure
  symbol(NextSymbol),
  notin first_symbol(NextSymbol),
  notin already_used_symbol(NextSymbol),
  already_used_symbol(PrevSymbol),
  nsym(PrevSymbol, NextSymbol);
next_available_symbol(Symbol) :-
  % if first symbol is not used yet, then just pick it
  notin already_used_symbol(Symbol),
  first_symbol(Symbol);

symbol(Symbol) :- nsym(Symbol, _);
symbol(Symbol) :- nsym(_, Symbol);

already_used_symbol(Symbol) :-
  stratum(Symbol, _Name);


nsym(A, B)@next :- nsym(A, B);

% successor-like relation, next symbol
first_symbol(a)@1;
nsym(a,b)@1;nsym(b,c)@1;nsym(c,d)@1;nsym(d,e)@1;nsym(e,f)@1;nsym(f,g)@1;
nsym(g,h)@1;nsym(h,i)@1;nsym(i,j)@1;nsym(j,k)@1;nsym(k,l)@1;nsym(l,m)@1;
nsym(m,n)@1;nsym(n,o)@1;nsym(o,p)@1;nsym(p,q)@1;nsym(q,r)@1;nsym(r,s)@1;
nsym(s,t)@1;nsym(t,u)@1;nsym(u,v)@1;nsym(v,w)@1;nsym(w,x)@1;nsym(x,y)@1;
nsym(y,z)@1;

