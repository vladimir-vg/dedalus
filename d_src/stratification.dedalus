% This code takes ast facts and performes required stratification for negation and aggregation.
% It assumed that code is valid (no negation or aggregation in dependency cycles).
%
% This way we can keep more parts of the interpreter written in Dedalus.
% This way it would be easier to port and rewrite implementation in different language.
%
% This code has explicitly specified stratification $stratum and $stratum_dependency,
% which makes it possible to execute it by semi-positive Datalog

'$stratum'(a, ast_clause);
'$stratum'(a, ast_body_expr);
'$stratum'(a, ast_body_atom);
'$stratum'(a, ast_atom);
'$stratum'(a, ast_clause_var_arg);
'$stratum'(a, ast_body_var_arg);
'$stratum'(a, symbol);
'$stratum'(a, initial_fact);
'$stratum'(a, negated_dependency);
'$stratum'(a, aggregated_dependency);
'$stratum'(a, body_atom_uses_var);
'$stratum'(a, aggregated_clause_var);

'$stratum'(b, path);
'$stratum'(b, cycle);
'$stratum'(b, vertex);
'$stratum'(b, dependency);

'$stratum'(c, leaf);
'$stratum'(c, stratum_option);

'$stratum'(d, stratum_number);
'$stratum'(d, stratum);
'$stratum'(d, stratum_dependency);

'$stratum_dependency'(b, a);
'$stratum_dependency'(c, b);
'$stratum_dependency'(d, c);
'$stratum_dependency'(d, a);

% $stratum_dependency forms a DAG, no cycles allowed.
% Each stratum contains set of rules, which are vertices in rule dependency graph.
% Basically we specify DAG of subgraphs.
%
% We could specify exact rule ordering for computation,
% use numbers for stratum identification instead of symbols,
% but thay would introduce more order than necessary.
%
% Better to keep things unordered as long as it is possible,
% to keep opportunities for optimization open.
'$stratum_dependency'(b, a);


% Okay, so I need to write stratification code in Dedalus
% using negation and successor and then stratify it by hand.


% Algorithm:
% 1) find all leaf dependencies
% 2) take first stratum number, assign it to leaf vertices
% 3) if all children are positive and have stratum A, then vertex also has stratum A
% 4) if vertex has negative child, where all children belong to A1, A2, ...,
%    then vertex has stratum max(A1, A2, ...)+1
% 5) if vertex belongs to cycle, when some of its children have stratum A1, A2, then its stratum is max(A1, A2, ...)+1



initial_fact(Name) <-
  ast_atom(Name, _AtomId, _Timestamp);

negated_dependency(Name1, Name2) <-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name2, Negated),
  Negated = true;

aggregated_dependency(Name1, Name2) <-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  % ast_body_expr(ClauseId, ExprId),
  % ast_body_atom(ExprId, Name2, Negated),
  aggregated_clause_var(ClauseId, VarName),
  body_atom_uses_var(ClauseId, Name2, VarName);

aggregated_clause_var(ClauseId, VarName) <-
  ast_clause_var_arg(ClauseId, _ArgN, VarName, AggFunc, _LocPrefix),
  AggFunc =/= none;

body_atom_uses_var(ClauseId, Name, VarName) <-
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name, Negated),
  ast_body_var_arg(ExprId, _ArgN, VarName, _LocPrefix);

dependency(Name1, Name2, NeedStratumChange) <-
  negated_dependency(Name1, Name2),
  NeedStratumChange = true;
dependency(Name1, Name2, NeedStratumChange) <-
  aggregated_dependency(Name1, Name2),
  NeedStratumChange = true;
dependency(Name1, Name2, NeedStratumChange) <-
  ast_clause(Name1, ClauseId, Suffix),
  Suffix = none,
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name2, _Negated),

  not negated_dependency(Name1, Name2),
  not aggregated_dependency(Name1, Name2),
  NeedStratumChange = false;



path(Name1, Name2) <-
  dependency(Name1, Name2, _NeedStratumChange);
path(Name1, Name2) <-
  dependency(Name1, Name0, _NeedStratumChange),
  path(Name0, Name2);

cycle(Name) <-
  path(Name, Name);

vertex(A) <-
  dependency(A, _B, _NeedStratumChange);
vertex(B) <-
  dependency(_A, B, _NeedStratumChange);

leaf(A) <-
  vertex(A),
  vertex(B),
  not dependency(A, B, true),
  not dependency(A, B, false);

% stratum_option computes one of the possible stratum numbers
% that given vertex may have. In the end only max stratum would be selected.

stratum_option(V, Stratum) <-
  leaf(V),
  Stratum = 1;
stratum_option(V, Stratum) <-
  % this stratum option likely would be overshadowed
  % by other rules. We need this for the case
  % if we have network of self-referencing cycles
  % that have no edges with leaf vertices at all.
  % In that case at least one initial_fact rule
  % inside this subgraph would spread stratum across.
  initial_fact(V),
  Stratum = 1;
stratum_option(Parent, Stratum) <-
  % if we have negative child with stratum,
  % then parent stratum must be at least +1
  dependency(Parent, Child, NeedStratumChange),
  NeedStratumChange = true,
  stratum_option(Child, Stratum1),
  successor(Stratum1, Stratum);
stratum_option(Parent, Stratum) <-
  % if have positive child, then just propagate its choosen stratum.
  % if parent has negative children, then this propagated value
  % will be disregared in favor of larger one.
  dependency(Parent, Child, NeedStratumChange),
  NeedStratumChange = false,
  stratum_option(Child, Stratum);



stratum_number(Name, max<Stratum>) <-
  stratum_option(Name, Stratum);

stratum(Name, StratumSym) <-
  stratum_number(Name, Stratum),
  symbol(Stratum, StratumSym);

stratum_dependency(ParentStratum, ChildStratum) <-
  dependency(Parent, Child, _NeedStratumChange),
  stratum(Parent, ParentStratum),
  stratum(Child, ChildStratum);

% It would be better to use symbols for stratums
% to explicitly show that they are not ordered,
% only stratum_dependency facts matter
symbol(1, a); symbol(2, b); symbol(3, c); symbol(4, d); symbol(5, e);
symbol(6, f); symbol(7, g); symbol(8, h); symbol(9, i); symbol(10, j);
symbol(11, k); symbol(12, l); symbol(13, m); symbol(14, n); symbol(15, o);
symbol(16, p); symbol(17, q); symbol(18, r); symbol(19, s); symbol(20, t);
symbol(21, u); symbol(22, v); symbol(23, w); symbol(24, x); symbol(25, y);
symbol(26, z);
