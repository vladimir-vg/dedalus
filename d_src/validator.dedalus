% In this file gonna check that given ast is correct.
% Rules that indicate error have prefix err_.
% This way we can select and specifically query these rules
% to check if ast is correct.


%%%
%%% Correctness checks to implement:
%%%
%%% [ ] No negation in dependency cycles
%%% [ ] _IgnoredVariable's used only once in body (otherwise they are used for matching)
%%%



% format of the facts that will describe Dedalus source
% that later will be used to correctness check, type inference
% and transformation.
%
% It is not really AST, right? Let's call it Abstract Syntax Tables :)
%
% ast_fact(Filename, Line, Name, FactN, Timestamp)
% ast_fact_int_arg(FactN, N, Value)
% ast_fact_sym_arg(FactN, N, Value)
% ast_fact_str_arg(FactN, N, Value)

% % ClauseN -- number of clause in the file
% % Suffix -- next, async or none
% ast_clause(Filename, Line, Name, ClauseN, Suffix)
% % ArgN -- position in the head
% % AggFunc -- min, max, count or none
% % LocPrefix -- true/false. #Location
% % head arg is identified uniquely by ClauseN-RuleN pair
% ast_clause_var_arg(ClauseN, ArgN, VarName, AggFunc, LocPrefix)
% ast_clause_int_arg(ClauseN, ArgN, Value)
% ast_clause_str_arg(ClauseN, ArgN, Value)
% ast_clause_sym_arg(ClauseN, ArgN, Value)

% % Negated -- true/false
% % RuleN -- position in the body, number of the rule
% % body rule is identified uniquely by ClauseN-RuleN pair
% ast_body_rule(Filename, Line, ClauseN, RuleN)

% % Op == '<', '>', '>=', ...
% % expected to have two arg facts with ArgN=1 and ArgN=2
% ast_body_binop(ClauseN, RuleN, Op)

produced_value(ClauseN, RuleN, Name) <-
  ast_body_fact(ClauseN, RuleN, Name, _Negated);

% ast_body_fact(ClauseN, RuleN, Name, Negated)
% % if body rule has explicit time variable
% ast_body_fact_var_time(ClauseN, RuleN, VarName)
% % if it is a constant
% ast_body_fact_int_time(ClauseN, RuleN, Value)

% ast_body_choose(ClauseN, RuleN)
% ast_body_choose_key_var(ClauseN, RuleN, ArgN, VarName)
% ast_body_choose_row_var(ClauseN, RuleN, ArgN, VarName)

% % information about arg used in body rule
% % LocPrefix = true/false
% ast_body_var_arg(ClauseN, RuleN, ArgN, VarName, LocPrefix)
% ast_body_int_arg(ClauseN, RuleN, ArgN, Value)
% ast_body_sym_arg(ClauseN, RuleN, ArgN, Value)
% ast_body_str_arg(ClauseN, RuleN, ArgN, Value)



% ===========================================================

% symbols 'successor' and 'choose' have special meaning
% can't be used as names of user-defined rules
%
% err_successor_used_as_rule_name
% err_choose_used_as_rule_name

% rule was used in body, however, no fact, to rules that
% would produce it exist. Body would be always false
% err_unknown_rule_in_body

% range_restricted

% This rule is not correct, since B is not range restricted,
% going to produce infinite number of facts:
%
% p(A, B) <- q(A);
%
% err_var_in_head_not_present_in_positive_body_rule

% This rule is not correct, since successor is not range restricted
% and both vars in it not present in range restricted rule:
%
%    p(A, B) <- successor(A, B)
%
% However, this should be okay:
%
%    p(A, E) <-
%      q(A, B), successor(B, C), successor(C, D), successor(D, E);
%    p(A, E) <-
%      successor(A, B), successor(B, C), successor(C, D), q(D, E);
%
% Assuming that q(A, B) and q(D, E) are range-restricted rules
%
% err_both_vars_in_successor_not_present_in_range_restricted_rule(File, Line) <-
%   body_fact(ClauseN, RuleN, successor, false),
%   body_var_arg(ClauseN, RuleN, _ArgN, VarName, _LocPrefix),
%   not range_restricted_var(ClauseN, RuleN, VarName);



range_restricted_rule(Name, Arity) <-
  % if there are no clauses with given name/arity
  % then we assume that this rule must be defined as a fact
  % and is range-restricted
  number_of_clauses(Name, Arity, 0);
range_restricted_rule(Name, Arity) <-
  % rule is range-restricted, if all rules in its clauses bodies
  % are range-restricted
  Name =/= successor, % successor is not range restricted by definition
  clause_arity(Name, ClauseN, Arity),
  % we need to check that body in each clause
  % is range-restricted
  range_restricted_clause(ClauseN);

% number_of_clauses(Name, Arity, 0) <-
%   todo;

% range_restricted_clause(ClauseN) <-
%   todo;

% if we have several arities for same name
% this would produce several facts
% clause_arity(Name, ClauseN, count<ArgN>) <-
%   ast_clause(_Filename, _Line, Name, ClauseN, _Suffix),
%   ast_clause_arg_number(ClauseN, ArgN);

clause_arg_number(ClauseN, ArgN) <-
  ast_clause_var_arg(ClauseN, ArgN, _VName, _AFunc, _LPrefix);
clause_arg_number(ClauseN, ArgN) <- ast_clause_int_arg(ClauseN, ArgN, _Value);
clause_arg_number(ClauseN, ArgN) <- ast_clause_str_arg(ClauseN, ArgN, _Value);
clause_arg_number(ClauseN, ArgN) <- ast_clause_sym_arg(ClauseN, ArgN, _Value);


% % location prefix for variables
% err_different_location_vars_in_rule_head
% err_different_location_vars_in_rule_body
% err_same_location_vars_in_rule_and_body



% Location prefixes in @async rules. They might be present or not.
% Let's walk through possible cases.
%
% 1. Absent in head and in body. It means that we have async rule,
%    where sender and receive are same node. Correct.
%
% 2. present in head, but not in body. It means that we know where to send
%    the event, and whoever has matching rule should send it
%    to that specific location. Correct.
%
% 3. Absent in head, present in body. We know where to send from,
%    but we don't know where. One may interpret it as sending
%    event to all possible nodes. Doesn't fit the design of PL.
%    We must be precise, instruction how to compute must be obvious.
%    Incorrect.
%
% 4. Present in head, present in body. We know where we send from/to.
%    Correct.
%
% So, here is the rule to detect 3rd case:
% err_location_var_in_body_but_not_in_head(Filename, Line1, Line2) <-
%   ast_clause(Filename, Line1, _Name, ClauseN, '@async'),
%   ast_body_rule(Filename, Line2, ClauseN, RuleN),
%   % okay, so there exist a variable with location prefix in body
%   ast_body_var_arg(ClauseN, RuleN, _ArgN, _VarName, LocPrefix),
%   LocPrefix = true,
 
%   % all variables in negated rule must appear in positive rule
%   % that's why we use helper rule
%   not exist_var_in_head_with_location_prefix(ClauseN);

% exist_var_in_head_with_location_prefix(ClauseN) <-
%   ast_clause_var_arg(ClauseN, _ArgN, _VarName, _AggFunc, LocPrefix),
%   LocPrefix = true;



% variables with location prefix, like here: #Location
% only make sense in @async rules. They denote from where to where
% event tuple should be delivered
err_location_not_in_async_rule(Filename, Line, ClauseN) <-
  ast_clause(Filename, _Line, _Name, ClauseN, Suffix),
  Suffix =/= '@async',
  ast_body_rule(Filename, Line, ClauseN, RuleN),
  ast_body_var_arg(ClauseN, RuleN, _ArgN, _VarName, LocPrefix),
  LocPrefix = true;



% timestamps
err_different_time_suffix_in_body(Filename, Line1, Line2) <-
  ast_body_rule(Filename, Line1, ClauseN, RuleN1),
  ast_body_rule(Filename, Line2, ClauseN, RuleN2),
  ast_body_fact_var_time(ClauseN, RuleN1, VarName1),
  ast_body_fact_var_time(ClauseN, RuleN2, VarName2),
  VarName1 =/= VarName2;



err_time_suffix_not_in_async_rule(Filename, Line) <-
  ast_clause(Filename, _Line, _Name, ClauseN, Suffix),
  Suffix =/= '@async',
  ast_body_rule(Filename, Line, ClauseN, RuleN),
  ast_body_fact_has_time_suffix(ClauseN, RuleN);

body_fact_has_time_suffix(ClauseN, RuleN) <-
  ast_body_fact_var_time(ClauseN, RuleN, _VarName);
body_fact_has_time_suffix(ClauseN, RuleN) <-
  ast_body_fact_int_time(ClauseN, RuleN, _Value);



% negation
% err_var_in_negation_not_present_in_positive(Filename, Line) <-
%   ast_body_rule(Filename, Line, ClauseN, RuleN),
%   ast_body_fact(ClauseN, RuleN, _Name, Negated),
%   Negated = true,
%   ast_body_var_arg(ClauseN, RuleN, _ArgN, VarName, _LocPrefix),
%   not var_present_in_positive_rule(ClauseN, VarName);

var_present_in_positive_rule(ClauseN, VarName) <-
  ast_body_fact(ClauseN, RuleN, _Name, Negated),
  Negated = false,
  ast_body_var_arg(ClauseN, RuleN, _ArgN, VarName, _LocPrefix);



% we need to transform rules with choose rules
% need to generate new ids for helper rules
% how to do it in Dedalus?
%
% At first I thought about introducing concat<Name> aggregation function
% but it implies order, which we don't have
%
% Another idea: use some kind of random_string() facts
% and choose from deterministically. But I can't do that,
% since I don't have choose rule yet, I am trying to implement it.
%
% Okay, I can do everything, but selecting new name.
% Let system outside compose everything.
%
% Hm. I could send requests/events to outside node (stdlib)
% to concat strings for me. Yeah, looks complicated.
