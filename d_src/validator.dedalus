% In this file gonna check that given ast is correct.
% Rules that indicate error have prefix err_.
% This way we can select and specifically query these rules
% to check if ast is correct.

% since we use negation, we need to explicitly
% stratify this code. Later when stratifier
% would work correctly, this can be removed:

'$meta stratum'(first, ast_atom_location)@0;
'$meta stratum'(first, ast_atom)@0;
'$meta stratum'(first, ast_atom_int_arg)@0;
'$meta stratum'(first, ast_atom_sym_arg)@0;
'$meta stratum'(first, ast_atom_str_arg)@0;
'$meta stratum'(first, ast_clause_location)@0;
'$meta stratum'(first, ast_clause)@0;
'$meta stratum'(first, ast_clause_var_arg)@0;
'$meta stratum'(first, ast_clause_int_arg)@0;
'$meta stratum'(first, ast_clause_str_arg)@0;
'$meta stratum'(first, ast_clause_sym_arg)@0;
'$meta stratum'(first, ast_body_expr_location)@0;
'$meta stratum'(first, ast_body_expr)@0;
'$meta stratum'(first, ast_body_binop)@0;
'$meta stratum'(first, ast_body_atom)@0;
'$meta stratum'(first, ast_body_atom_var_time)@0;
'$meta stratum'(first, ast_body_atom_int_time)@0;
'$meta stratum'(first, ast_body_choose)@0;
'$meta stratum'(first, ast_body_choose_key_var)@0;
'$meta stratum'(first, ast_body_choose_row_var)@0;
'$meta stratum'(first, ast_body_var_arg)@0;
'$meta stratum'(first, ast_body_int_arg)@0;
'$meta stratum'(first, ast_body_sym_arg)@0;
'$meta stratum'(first, ast_body_str_arg)@0;
% negated atoms and their deps also must be in first stratum:
'$meta stratum'(first, var_used_in_expr)@0;
'$meta stratum'(first, var_present_in_positive)@0;
% deps of aggregated atoms must be in first stratum:
'$meta stratum'(first, atom_arg)@0;
'$meta stratum'(first, clause_arg)@0;
'$meta stratum'(first, body_atom_arg)@0;


'$meta stratum'(second, invalid_ast)@0;
'$meta stratum'(second, err_negation_in_dep_cycle)@0;
'$meta stratum'(second, err_time_suffix_not_in_async_rule)@0;
'$meta stratum'(second, err_range_unrestricted_variable)@0;
'$meta stratum'(second, err_negated_not_in_positive)@0;
'$meta stratum'(second, err_wrong_rule_name)@0;
'$meta stratum'(second, reachable_with_negation)@0;
'$meta stratum'(second, predicate_dependency)@0;
'$meta stratum'(second, reachable)@0;
'$meta stratum'(second, body_atom_has_time_suffix)@0;
'$meta stratum'(second, err_inconsistent_number_of_fields)@0;
'$meta stratum'(second, arity)@0;
'$meta stratum'(second, err_location_prefix_in_successor)@0;
'$meta stratum'(second, err_successor_wrong_arg_num)@0;

'$meta stratum_dependency'(second, first)@0;



%%%
%%% Correctness checks to implement:
%%%
%%% [ ] No negation in dependency cycles
%%% [ ] _IgnoredVariable's used only once in body (otherwise they are used for matching)
%%% [ ] choose((X, ...), (Y, ...)), X... can be empty, but Y... cannot
%%%



% format of the atoms that will describe Dedalus source
% that later will be used to correctness check, type inference
% and transformtion.
%
% It is not really AST, right? Let's call it Abstract Syntax Tables :)
%
% ast_atom_location(Filename, Line, Name, AtomId)
% ast_atom(Name, AtomId, Timestamp)
% ast_atom_int_arg(AtomId, ArgN, Value)
% ast_atom_sym_arg(AtomId, ArgN, Value)
% ast_atom_str_arg(AtomId, ArgN, Value)

% % ClauseN -- number of clause in the file
% % Suffix -- next, async or none
% ast_clause_location(Filename, Line, ClauseId)
% ast_clause(Name, ClauseId, Suffix)
% % ArgN -- position in the head
% % AggFunc -- min, max, count or none
% % LocPrefix -- true/false. #Location
% % head arg is identified uniquely by ClauseN-RuleN pair
% ast_clause_var_arg(ClauseId, ArgN, VarName, AggFunc, LocPrefix)
% ast_clause_int_arg(ClauseId, ArgN, Value)
% ast_clause_str_arg(ClauseId, ArgN, Value)
% ast_clause_sym_arg(ClauseId, ArgN, Value)

% % Negated -- true/false
% % RuleN -- position in the body, number of the rule
% % body rule is identified uniquely by ClauseN-RuleN pair
% ast_body_expr_location(Filename, Line, ExprId)
% ast_body_expr(ClauseId, ExprId)

% % Op == '<', '>', '>=', ...
% % expected to have two arg atoms with ArgN=1 and ArgN=2
% ast_body_binop(ExprId, Op)

% ast_body_atom(ExprId, Name, Negated)
% % if body rule has explicit time variable
% ast_body_atom_var_time(ExprId, VarName)
% % if it is a constant
% ast_body_atom_int_time(ExprId, Value)

% ast_body_choose(ExprId)
% ast_body_choose_key_var(ExprId, ArgN, VarName)
% ast_body_choose_row_var(ExprId, ArgN, VarName)

% % information about arg used in body rule
% % LocPrefix = true/false
% ast_body_var_arg(ExprId, ArgN, VarName, LocPrefix)
% ast_body_int_arg(ExprId, ArgN, Value)
% ast_body_sym_arg(ExprId, ArgN, Value)
% ast_body_str_arg(ExprId, ArgN, Value)



% ===========================================================

% symbols 'successor' and 'choose' have special meaning
% can't be used as names of user-defined rules
%
% err_successor_used_as_rule_name
% err_choose_used_as_rule_name

% rule was used in body, however, no atom, to rules that
% would produce it exist. Body would be always false
% err_unknown_rule_in_body

% range_restricted

% This rule is not correct, since B is not range restricted,
% going to produce infinite number of atoms:
%
% p(A, B) :- q(A);
%
% err_var_in_head_not_present_in_positive_body_rule

% This rule is not correct, since successor is not range restricted
% and both vars in it not present in range restricted rule:
%
%    p(A, B) :- successor(A, B)
%
% However, this should be okay:
%
%    p(A, E) :-
%      q(A, B), successor(B, C), successor(C, D), successor(D, E);
%    p(A, E) :-
%      successor(A, B), successor(B, C), successor(C, D), q(D, E);
%
% Assuming that q(A, B) and q(D, E) are range-restricted rules
%
% err_both_vars_in_successor_not_present_in_range_restricted_rule(File, Line) :-
%   body_atom(ClauseN, RuleN, successor, false),
%   body_var_arg(ClauseN, RuleN, _ArgN, VarName, _LocPrefix),
%   not range_restricted_var(ClauseN, RuleN, VarName);



% range_restricted_rule(Name, Arity) :-
%   % if there are no clauses with given name/arity
%   % then we assume that this rule must be defined as a atom
%   % and is range-restricted
%   number_of_clauses(Name, Arity, 0);
% range_restricted_rule(Name, Arity) :-
%   % rule is range-restricted, if all rules in its clauses bodies
%   % are range-restricted
%   Name =/= successor, % successor is not range restricted by definition
%   clause_arity(Name, ClauseN, Arity),
%   % we need to check that body in each clause
%   % is range-restricted
%   range_restricted_clause(ClauseN);

% number_of_clauses(Name, Arity, 0) :-
%   todo;

% range_restricted_clause(ClauseN) :-
%   todo;

% if we have several arities for same name
% this would produce several atoms
% clause_arity(Name, ClauseN, count<ArgN>) :-
%   ast_clause(_Filename, _Line, Name, ClauseN, _Suffix),
%   ast_clause_arg_number(ClauseN, ArgN);

% clause_arg_number(ClauseN, ArgN) :-
%   ast_clause_var_arg(ClauseN, ArgN, _VName, _AFunc, _LPrefix);
% clause_arg_number(ClauseN, ArgN) :- ast_clause_int_arg(ClauseN, ArgN, _Value);
% clause_arg_number(ClauseN, ArgN) :- ast_clause_str_arg(ClauseN, ArgN, _Value);
% clause_arg_number(ClauseN, ArgN) :- ast_clause_sym_arg(ClauseN, ArgN, _Value);


% % location prefix for variables
% err_different_location_vars_in_rule_head
% err_different_location_vars_in_rule_body
% err_same_location_vars_in_rule_and_body



% Location prefixes in @async rules. They might be present or not.
% Let's walk through possible cases.
%
% 1. Absent in head and in body. It means that we have async rule,
%    where sender and receive are same node. Correct.
%
% 2. present in head, but not in body. It means that we know where to send
%    the event, and whoever has matching rule should send it
%    to that specific location. Correct.
%
% 3. Absent in head, present in body. We know where to send from,
%    but we don't know where. One may interpret it as sending
%    event to all possible nodes. Doesn't fit the design of PL.
%    We must be precise, instruction how to compute must be obvious.
%    Incorrect.
%
% 4. Present in head, present in body. We know where we send from/to.
%    Correct.
%
% So, here is the rule to detect 3rd case:
% err_location_var_in_body_but_not_in_head(Filename, Line1, Line2) :-
%   ast_clause(Filename, Line1, _Name, ClauseN, '@async'),
%   ast_body_expr(Filename, Line2, ClauseN, RuleN),
%   % okay, so there exist a variable with location prefix in body
%   ast_body_var_arg(ClauseN, RuleN, _ArgN, _VarName, LocPrefix),
%   LocPrefix = true,
 
%   % all variables in negated rule must appear in positive rule
%   % that's why we use helper rule
%   not exist_var_in_head_with_location_prefix(ClauseN);

% exist_var_in_head_with_location_prefix(ClauseN) :-
%   ast_clause_var_arg(ClauseN, _ArgN, _VarName, _AggFunc, LocPrefix),
%   LocPrefix = true;



% variables with location prefix, like here: #Location
% only make sense in @async rules. They denote from where to where
% event tuple should be delivered
% err_location_not_in_async_rule(Filename, Line, ClauseN) :-
%   ast_clause(Filename, _Line, _Name, ClauseN, Suffix),
%   Suffix =/= '@async',
%   ast_body_expr(Filename, Line, ClauseN, RuleN),
%   ast_body_var_arg(ClauseN, RuleN, _ArgN, _VarName, LocPrefix),
%   LocPrefix = true;



% timestamps
% err_different_time_suffix_in_body(Filename, Line1, Line2) :-
%   ast_body_expr(Filename, Line1, ClauseN, RuleN1),
%   ast_body_expr(Filename, Line2, ClauseN, RuleN2),
%   ast_body_atom_var_time(ClauseN, RuleN1, VarName1),
%   ast_body_atom_var_time(ClauseN, RuleN2, VarName2),
%   VarName1 =/= VarName2;

invalid_ast :- err_negation_in_dep_cycle(_,_,_);
invalid_ast :- err_time_suffix_not_in_async_rule(_,_,_);
invalid_ast :- err_range_unrestricted_variable(_,_,_);
invalid_ast :- err_negated_not_in_positive(_,_,_);
invalid_ast :- err_wrong_rule_name(_,_,_);
invalid_ast :- err_inconsistent_number_of_fields(_);



% we assume that rules with same names have same arity
err_negation_in_dep_cycle(Filename, Line, Name) :-
  reachable_with_negation(Name, Name, Filename, Line);



reachable_with_negation(Name1, Name2, Filename, Line) :-
  predicate_dependency(Name1, Name2, Negated, Filename, Line),
  Negated = true;
reachable_with_negation(Name1, Name3, Filename, Line) :-
  reachable(Name1, Name2),
  predicate_dependency(Name2, Name3, Negated, Filename, Line),
  Negated = true;
reachable_with_negation(Name1, Name3, Filename, Line) :-
  reachable_with_negation(Name1, Name2, _Filename, _Line),
  predicate_dependency(Name2, Name3, Negated, Filename, Line),
  Negated = true;



reachable(Name1, Name2) :-
  predicate_dependency(Name1, Name2, Negated, _Filename, _Line),
  Negated = false;
reachable(Name1, Name3) :-
  reachable(Name1, Name2),
  predicate_dependency(Name2, Name3, Negated, _Filename, _Line),
  Negated = false;

% Name2 is below (must be computed before)
% Name1 is above (must be computed after)
predicate_dependency(Name1, Name2, Negated, Filename, Line) :-
  ast_clause(Name1, ClauseId, none),
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name2, Negated),
  ast_body_expr_location(Filename, Line, ExprId);

%%%
%%%
%%%

err_time_suffix_not_in_async_rule(Filename, Line, Name) :-
  ast_clause_location(Filename, _Line, ClauseId),
  ast_clause(Name, ClauseId, Suffix),
  Suffix =/= '@async',
  ast_body_expr_location(Filename, Line, ExprId),
  body_atom_has_time_suffix(ExprId);

body_atom_has_time_suffix(ExprId) :-
  ast_body_atom_var_time(ExprId, _VarName);
body_atom_has_time_suffix(ExprId) :-
  ast_body_atom_int_time(ExprId, _Value);

%%%
%%%
%%%

err_range_unrestricted_variable(Filename, Line, VarName) :-
  ast_body_expr(ClauseId, ExprId),
  ast_body_expr_location(Filename, Line, ExprId),
  ast_body_atom(ExprId, successor, false),
  var_used_in_expr(ExprId, VarName),
  notin var_present_in_positive(ClauseId, VarName);

var_used_in_expr(ExprId, VarName) :-
  ast_body_var_arg(ExprId, _ArgN, VarName, _LocPrefix);

var_present_in_positive(ClauseId, VarName) :-
  ast_body_expr(ClauseId, ExprId),
  ast_body_atom(ExprId, Name, false),
  Name =/= successor,
  var_used_in_expr(ExprId, VarName);

%%%
%%%
%%%

err_negated_not_in_positive(Filename, Line, VarName) :-
  ast_body_expr(ClauseId, ExprId),
  ast_body_expr_location(Filename, Line, ExprId),
  ast_body_atom(ExprId, _Name, true),
  var_used_in_expr(ExprId, VarName),
  notin var_present_in_positive(ClauseId, VarName);

%%%
%%%
%%%

err_wrong_rule_name(Filename, Line, Name) :-
  ast_clause_location(Filename, Line, ClauseId),
  ast_clause(Name, ClauseId, _Suffix),
  Name = successor;
err_wrong_rule_name(Filename, Line, Name) :-
  ast_clause_location(Filename, Line, ClauseId),
  ast_clause(Name, ClauseId, _Suffix),
  Name = choose;

%%%
%%%
%%%

err_inconsistent_number_of_fields(Name) :-
  arity(Name, _, N1),
  arity(Name, _, N2),
  N1 =/= N2;

arity(Name, AtomId, count<ArgN>) :-
  ast_atom(Name, AtomId, _Timestamp),
  atom_arg(AtomId, ArgN);
arity(Name, ClauseId, count<ArgN>) :-
  ast_clause(Name, ClauseId, _Suffix),
  clause_arg(ClauseId, ArgN);
arity(Name, ExprId, count<ArgN>) :-
  ast_body_atom(ExprId, Name, _Negated),
  body_atom_arg(ExprId, ArgN);

atom_arg(AtomId, ArgN) :- ast_atom_int_arg(AtomId, ArgN, _);
atom_arg(AtomId, ArgN) :- ast_atom_sym_arg(AtomId, ArgN, _);
atom_arg(AtomId, ArgN) :- ast_atom_str_arg(AtomId, ArgN, _);

clause_arg(ClauseId, ArgN) :- ast_clause_int_arg(ClauseId, ArgN, _);
clause_arg(ClauseId, ArgN) :- ast_clause_str_arg(ClauseId, ArgN, _);
clause_arg(ClauseId, ArgN) :- ast_clause_sym_arg(ClauseId, ArgN, _);
clause_arg(ClauseId, ArgN) :- ast_clause_var_arg(ClauseId, ArgN, _, _, _);

body_atom_arg(ExprId, ArgN) :- ast_body_var_arg(ExprId, ArgN, _, _);
body_atom_arg(ExprId, ArgN) :- ast_body_int_arg(ExprId, ArgN, _);
body_atom_arg(ExprId, ArgN) :- ast_body_sym_arg(ExprId, ArgN, _);
body_atom_arg(ExprId, ArgN) :- ast_body_str_arg(ExprId, ArgN, _);

%%%
%%%
%%%

err_location_prefix_in_successor(Filename, Line, VarName) :-
  ast_body_expr_location(Filename, Line, ExprId),
  ast_body_atom(ExprId, successor, _Negated),
  ast_body_var_arg(ExprId, _, VarName, LocPrefix),
  LocPrefix = true;

err_successor_wrong_arg_num(Filename, Line, N) :-
  ast_body_expr_location(Filename, Line, ExprId),
  ast_body_atom(ExprId, successor, _Negated),
  arity(successor, ExprId, N),
  N =/= 2;

% we need to transform rules with choose rules
% need to generate new ids for helper rules
% how to do it in Dedalus?
%
% At first I thought about introducing concat<Name> aggregation function
% but it implies order, which we don't have
%
% Another idea: use some kind of random_string() atoms
% and choose from deterministically. But I can't do that,
% since I don't have choose rule yet, I am trying to implement it.
%
% Okay, I can do everything, but selecting new name.
% Let system outside compose everything.
%
% Hm. I could send requests/events to outside node (stdlib)
% to concat strings for me. Yeah, looks complicated.
