-- TODO: parse rules like:
-- rule(1);
-- it is a rule, not a fact. It turns into rule(1, _Timestamp);

DEDALUS_FILE := CLAUSE*
CLAUSE := FACT ; | RULE ;
FACT := ATOM FACT_REMAINDER
FACT_REMAINDER := @ NON_NEG_INTEGER | ( CONST_ARGUMENTS ) @ NON_NEG_INTEGER

CONST_ARGUMENTS := CONST | CONST , CONST_ARGUMENTS
CONST := INTEGER | ATOM | STRING
NON_NEG_INTEGER := [0-9]+
INTEGER := [-+]?[0-9]+
ATOM := [a-z][a-zA-Z0-9_]* | ' [a-zA-Z0-9_]* '
STRING := " [a-zA-Z0-9]* "

RULE := RULE_HEAD RULE_REMAINDER CONDITIONS
RULE_REMAINDER := @next <- | @async <- | <-
RULE_HEAD := ATOM ( PARAMS ) | ATOM

PARAMS := PARAM | PARAM , PARAMS
PARAM := CONST | AGGREGATED_VARIABLE | VARIABLE

ARGUMENTS := ARGUMENT | ARGUMENT , ARGUMENTS
ARGUMENT := CONST | VARIABLE

AGGREGATED_VARIABLE := ATOM < VARIABLE >

CONDITIONS := CONDITION | CONDITION , CONDITIONS
CONDITION := not FACT_CONDITION | not COMPARISON | FACT_CONDITION | COMPARISON
COMPARISON := NUMVALUE OP NUMVALUE
NUMVALUE := INTEGER | VARIABLE
OP := > | < | >= | =< | =/= | =

FACT_CONDITION := ATOM | ATOM @ NUMVALUE | ATOM ( ARGUMENTS ) | ATOM ( ARGUMENTS ) @ NUMVALUE

VARIABLE := head:[A-Z_] tail:[a-zA-Z0-9_]*
